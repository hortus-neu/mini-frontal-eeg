%% scripts/timefreq.m
% Author: Tao He 
% Date: 2025-09-24

clear; clc;

%--------------------------------------------------------------------------
% 1. Load data
%--------------------------------------------------------------------------
% Assume you already have preprocessed EEG data saved as .set files
% inside the folder data/cleaned/. These files were generated by
% your preprocessing pipeline (scripts/preprocess.m).

dataDir = fullfile('data','cleaned');
% fullfile() automatically builds a valid file path for your OS.
% Here it combines 'data' and 'cleaned' into "data/cleaned".
% Advantage: it works on both Windows (with "\") and Mac/Linux (with "/").

files = dir(fullfile(dataDir, '*.set'));
% dir() lists all files that match a pattern.
% Here we search inside data/cleaned for files ending with ".set".
% Result: 'files' is a struct array.
% Each element corresponds to one file, with fields like:
%   - name      → the file name, e.g. 'subject1_cleaned.set'
%   - folder    → the folder path
%   - date      → last modification date (string)
%   - datenum   → same date in numeric format
%   - bytes     → file size in bytes

assert(~isempty(files), 'No cleaned EEG data found, please run preprocess.m first');
% assert(condition, message) will stop execution if condition is false.
% Here condition = ~isempty(files), meaning "files is not empty".
% isempty(files) returns true if no files are found.
% If no .set file exists in data/cleaned, the script stops and
% displays the error message: "No cleaned EEG data found, please run preprocess.m first".

[~, idx] = max([files.datenum]);
EEG = pop_loadset('filename', files(idx).name, 'filepath', dataDir);

%--------------------------------------------------------------------------
% 2. Find the target channel (Fz)
%--------------------------------------------------------------------------

chanFz = find(strcmpi({EEG.chanlocs.labels}, 'Fz'));
% {EEG.chanlocs.labels} extracts all channel labels from EEG.chanlocs.
%   - EEG.chanlocs is a struct array, each element describes one electrode.
%   - The field 'labels' stores the electrode name, e.g., 'Fz', 'Cz', 'P3'.
%   - { ... } creates a cell array of all labels, e.g. {'Fz','Cz','P3',...}.
%
% strcmpi(A, 'Fz') compares each label in A with the string 'Fz'.
%   - 'i' means case-insensitive (so 'fz' or 'FZ' also match).
%   - Output: a logical array, e.g. [1 0 0 ...], where 1 = match found.
%
% find(...) returns the index of the matching element(s).
%   - So chanFz will be the numeric index of 'Fz' in EEG.chanlocs.
%   - Example: if 'Fz' is the 5th channel, chanFz = 5.

assert(~isempty(chanFz), ...
    'Fz channel not found, please check channel labels in the data');
% assert(condition, message) checks that Fz was found.
% ~isempty(chanFz) means "chanFz is not empty".
% If chanFz is empty (Fz does not exist in labels), MATLAB stops and
% prints the error message to remind you to check your dataset.


%--------------------------------------------------------------------------
% 3. Run time-frequency analysis
%--------------------------------------------------------------------------

figure;
% Open a new figure window. The time-frequency plot will be drawn here.
% If you don't call figure, MATLAB may overwrite an existing plot.

% The general syntax of newtimef is:
% newtimef( data, frames, tlimits, srate, cycles, ... )
%
% - data    = EEG.data(chanIndex, :, :)
%             → Selects one channel (e.g., Fz) across all trials.
%             → Dimensions: [1 x points x trials]
%
% - frames  = EEG.pnts
%             → The number of data points per trial (epoch length).
%
% - tlimits = [EEG.xmin EEG.xmax]*1000
%             → Time limits of the epoch in milliseconds.
%             → Example: if EEG.xmin = -0.2, EEG.xmax = 0.8,
%               then tlimits = [-200 800].
%
% - srate   = EEG.srate
%             → Sampling rate in Hz, tells EEGLAB how to scale the time axis.
%
% - cycles  = [3 0.5] or 0
%             → Controls the wavelet or window length.
%             → [3 0.5] means 3 cycles at the lowest frequency and variable cycles at higher frequencies (Morlet wavelet).
%             → 0 means short-time Fourier transform (STFT).

newtimef(EEG.data(chanFz,:,:), EEG.pnts, ...
         [EEG.xmin EEG.xmax]*1000, EEG.srate, [3 0.5], ...
         'baseline', NaN, ...       % Baseline correction method.
                                    % NaN = use the entire trial as baseline.
                                    % Or you can set a time window, e.g. [-200 0].
         'freqs', [2 40], ...       % Frequency range to display (Hz).
                                    % Here: from 2 Hz to 40 Hz.
         'plotersp', 'on', ...      % Plot ERSP (Event-Related Spectral Perturbation).
                                    % This shows power changes over time-frequency.
         'plotitc', 'off');         % Do not plot ITC (Inter-Trial Coherence).
                                    % ITC measures phase-locking across trials.

title('Time-Frequency at Fz');
% Adds a title to the figure.
% Helpful when you save multiple plots and want to identify which channel.


%--------------------------------------------------------------------------
% 4. Save the figure
%--------------------------------------------------------------------------

if ~exist('figs','dir'), mkdir('figs'); end
% exist('figs','dir') checks whether a folder named 'figs' already exists.
%   - If it exists, exist(...) returns a nonzero value.
%   - If it does not exist, exist(...) returns 0.
% The ~ (NOT) operator makes the condition true when the folder is missing.
% mkdir('figs') creates the folder 'figs' if it does not exist.
% This ensures that all your output plots are stored in a dedicated folder.

saveas(gcf, fullfile('figs','timefreq_Fz.png'));
% saveas(fig_handle, filename) saves the current figure to a file.
% gcf = "get current figure", returns the handle to the active figure window.
% fullfile('figs','timefreq_Fz.png') builds a cross-platform path
% (e.g., "figs/timefreq_Fz.png").
% The file will be saved as a PNG image. You can also change the extension:
%   - .fig  → MATLAB figure file (editable later)
%   - .jpg  → JPEG image
%   - .pdf  → vector-based PDF

disp('✅ Time-frequency analysis finished, figure saved to figs/timefreq_Fz.png');
% disp(...) prints a message to the Command Window.
% Here it gives you a clear confirmation that the process is complete
% and tells you where the file was saved.
